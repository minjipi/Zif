import "./style.css";
import encode from "gifski-wasm";

// Îã§Íµ≠Ïñ¥ ÏßÄÏõê
let currentLanguage = localStorage.getItem("zifLanguage") || "ko";

const translations = {
  ko: {
    title: "ZIF",
    subtitle: "Premium Video to GIF Converter",
    tagline: "Í∞úÏù∏ Ï†ïÎ≥¥ Í±±Ï†ï ÏóÜÎäî ÏµúÍ≥† ÌíàÏßàÏùò GIF Î≥ÄÌôò ÌîÑÎ°úÍ∑∏Îû®",
    uploadText: "ÎπÑÎîîÏò§ ÌååÏùºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî",
    uploadSubtext:
      "ÌÅ¥Î¶≠ÌïòÍ±∞ÎÇò ÎìúÎûòÍ∑∏ & ÎìúÎ°≠ÏúºÎ°ú ÏóÖÎ°úÎìúÌïòÎ©¥ ÏûêÎèôÏúºÎ°ú GIFÍ∞Ä ÏÉùÏÑ±Îê©ÎãàÎã§.",
    previewTitle: "ÌîÑÎ†àÏûÑ ÎØ∏Î¶¨Î≥¥Í∏∞",
    outputTitle: "ÏÉùÏÑ±Îêú GIF",
    downloadText: "GIF Îã§Ïö¥Î°úÎìú",
    advancedSettingsTitle: "Í≥†Í∏â ÏÑ§Ï†ï",
    intervalLabel: "ÌîÑÎ†àÏûÑ Í∞ÑÍ≤© (Ï¥à)",
    outputWidthLabel: "Ï∂úÎ†• Í∞ÄÎ°ú ÌÅ¨Í∏∞ (px)",
    qualityLabel: "ÌíàÏßà (1~100)",
    fpsLabel: "FPS (ÌîÑÎ†àÏûÑ/Ï¥à)",
    reconvertText: "üîÑ ÏÉà ÏÑ§Ï†ïÏúºÎ°ú GIF Ïû¨ÏÉùÏÑ±",
    loadingVideo: "ÎπÑÎîîÏò§Î•º Î°úÎî© Ï§ë...",
    extractingFrames: "ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë...",
    generatingGif: "GIF ÏÉùÏÑ± Ï§ë...",
    completed: "GIF ÏÉùÏÑ± ÏôÑÎ£å!",
    completedSubtext: "ÏïÑÎûò Í≥†Í∏â ÏÑ§Ï†ïÏóêÏÑú Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú Ïû¨ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§",
    regeneratingGif: "GIF Ïû¨ÏÉùÏÑ± Ï§ë...",
    langToggleText: "ÌïúÍµ≠Ïñ¥",
  },
  en: {
    title: "ZIF",
    subtitle: "Premium Video to GIF Converter",
    tagline:
      "The best quality GIF converter without worrying about your privacy.",
    uploadText: "Select Video File",
    uploadSubtext:
      "Click or drag & drop to upload and automatically generate GIF.",
    previewTitle: "Frame Preview",
    outputTitle: "Generated GIF",
    downloadText: "Download GIF",
    advancedSettingsTitle: "Advanced Settings",
    intervalLabel: "Frame Interval (seconds)",
    outputWidthLabel: "Output Width (px)",
    qualityLabel: "Quality (1~100)",
    fpsLabel: "FPS (frames/second)",
    reconvertText: "üîÑ Regenerate GIF with New Settings",
    loadingVideo: "Loading video...",
    extractingFrames: "Extracting frames...",
    generatingGif: "Generating GIF...",
    completed: "GIF Generation Complete!",
    completedSubtext:
      "You can regenerate with different options in advanced settings below",
    regeneratingGif: "Regenerating GIF...",
    langToggleText: "English",
  },
  ja: {
    title: "ZIF",
    subtitle: "„Éó„É¨„Éü„Ç¢„É† Video to GIF „Ç≥„É≥„Éê„Éº„Çø„Éº",
    tagline: "ÊúÄÈ´òÂìÅË≥™„ÅÆGIFÂ§âÊèõ„ÅÆ„Åü„ÇÅ„ÅÆÂÆâÂÖ®„ÅßÈù©Êñ∞ÁöÑ„Å™„ÇΩ„É™„É•„Éº„Ç∑„Éß„É≥",
    uploadText: "„Éì„Éá„Ç™„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ",
    uploadSubtext:
      "„ÇØ„É™„ÉÉ„ÇØ„Åæ„Åü„ÅØ„Éâ„É©„ÉÉ„Ç∞&„Éâ„É≠„ÉÉ„Éó„Åß„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åô„Çã„Å®Ëá™ÂãïÁöÑ„Å´GIF„ÅåÁîüÊàê„Åï„Çå„Åæ„Åô„ÄÇ",
    previewTitle: "„Éï„É¨„Éº„É†„Éó„É¨„Éì„É•„Éº",
    outputTitle: "ÁîüÊàê„Åï„Çå„ÅüGIF",
    downloadText: "üì• GIF„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ",
    advancedSettingsTitle: "Ë©≥Á¥∞Ë®≠ÂÆö",
    intervalLabel: "„Éï„É¨„Éº„É†ÈñìÈöîÔºàÁßíÔºâ",
    outputWidthLabel: "Âá∫ÂäõÂπÖÔºàpxÔºâ",
    qualityLabel: "ÂìÅË≥™Ôºà1~100Ôºâ",
    fpsLabel: "FPSÔºà„Éï„É¨„Éº„É†/ÁßíÔºâ",
    reconvertText: "üîÑ Êñ∞„Åó„ÅÑË®≠ÂÆö„ÅßGIFÂÜçÁîüÊàê",
    loadingVideo: "„Éì„Éá„Ç™„ÇíË™≠„ÅøËæº„Åø‰∏≠...",
    extractingFrames: "„Éï„É¨„Éº„É†„ÇíÊäΩÂá∫‰∏≠...",
    generatingGif: "GIFÁîüÊàê‰∏≠...",
    completed: "GIFÁîüÊàêÂÆå‰∫ÜÔºÅ",
    completedSubtext: "‰∏ã„ÅÆË©≥Á¥∞Ë®≠ÂÆö„Åß‰ªñ„ÅÆ„Ç™„Éó„Ç∑„Éß„É≥„ÅßÂÜçÁîüÊàê„Åß„Åç„Åæ„Åô",
    regeneratingGif: "GIFÂÜçÁîüÊàê‰∏≠...",
    langToggleText: "Êó•Êú¨Ë™û",
  },
  zh: {
    title: "ZIF",
    subtitle: "È´òÁ∫ßËßÜÈ¢ëËΩ¨GIFËΩ¨Êç¢Âô®",
    tagline: "Áî®‰∫éÊúÄÈ´òË¥®ÈáèGIFËΩ¨Êç¢ÁöÑÂÆâÂÖ®ÂàõÊñ∞Ëß£ÂÜ≥ÊñπÊ°à",
    uploadText: "ÈÄâÊã©ËßÜÈ¢ëÊñá‰ª∂",
    uploadSubtext: "ÁÇπÂáªÊàñÊãñÊîæ‰∏ä‰º†ÔºåËá™Âä®ÁîüÊàêGIF„ÄÇ",
    previewTitle: "Â∏ßÈ¢ÑËßà",
    outputTitle: "ÁîüÊàêÁöÑGIF",
    downloadText: "üì• ‰∏ãËΩΩGIF",
    advancedSettingsTitle: "È´òÁ∫ßËÆæÁΩÆ",
    intervalLabel: "Â∏ßÈó¥ÈöîÔºàÁßíÔºâ",
    outputWidthLabel: "ËæìÂá∫ÂÆΩÂ∫¶ÔºàpxÔºâ",
    qualityLabel: "Ë¥®ÈáèÔºà1~100Ôºâ",
    fpsLabel: "FPSÔºàÂ∏ß/ÁßíÔºâ",
    reconvertText: "üîÑ ‰ΩøÁî®Êñ∞ËÆæÁΩÆÈáçÊñ∞ÁîüÊàêGIF",
    loadingVideo: "Ê≠£Âú®Âä†ËΩΩËßÜÈ¢ë...",
    extractingFrames: "Ê≠£Âú®ÊèêÂèñÂ∏ß...",
    generatingGif: "Ê≠£Âú®ÁîüÊàêGIF...",
    completed: "GIFÁîüÊàêÂÆåÊàêÔºÅ",
    completedSubtext: "ÊÇ®ÂèØ‰ª•Âú®‰∏ãÈù¢ÁöÑÈ´òÁ∫ßËÆæÁΩÆ‰∏≠‰ΩøÁî®‰∏çÂêåÈÄâÈ°πÈáçÊñ∞ÁîüÊàê",
    regeneratingGif: "Ê≠£Âú®ÈáçÊñ∞ÁîüÊàêGIF...",
    langToggleText: "‰∏≠Êñá",
  },
};

function toggleLanguage() {
  const languages = ["ko", "en", "ja", "zh"];
  const currentIndex = languages.indexOf(currentLanguage);
  currentLanguage = languages[(currentIndex + 1) % languages.length];
  localStorage.setItem("zifLanguage", currentLanguage);
  updateAllTexts();
}

// Ìà¥ÌåÅ Í∏∞Îä•
const tooltips = {
  ko: {
    interval:
      "ÎπÑÎîîÏò§ÏóêÏÑú ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂úÌïòÎäî ÏãúÍ∞Ñ Í∞ÑÍ≤©ÏûÖÎãàÎã§. Í∞íÏù¥ ÏûëÏùÑÏàòÎ°ù Îçî Î∂ÄÎìúÎü¨Ïö¥ GIFÍ∞Ä ÏÉùÏÑ±ÎêòÏßÄÎßå ÌååÏùº ÌÅ¨Í∏∞Í∞Ä Ïª§ÏßëÎãàÎã§.",
    outputWidth:
      "GIFÏùò Í∞ÄÎ°ú ÌîΩÏÖÄ ÌÅ¨Í∏∞ÏûÖÎãàÎã§. Í∞íÏù¥ ÌÅ¥ÏàòÎ°ù ÌôîÏßàÏù¥ Ï¢ãÏïÑÏßÄÏßÄÎßå ÌååÏùº ÌÅ¨Í∏∞Í∞Ä Ïª§ÏßëÎãàÎã§.",
    quality:
      "GIFÏùò ÏïïÏ∂ï ÌíàÏßàÏûÖÎãàÎã§. 1Ïù¥ ÏµúÍ≥† ÌíàÏßà(ÏµúÎåÄ ÌååÏùº ÌÅ¨Í∏∞), 100Ïù¥ ÏµúÏ†Ä ÌíàÏßà(ÏµúÏÜå ÌååÏùº ÌÅ¨Í∏∞)ÏûÖÎãàÎã§.",
    fps: "Ï¥àÎãπ ÌëúÏãúÎêòÎäî ÌîÑÎ†àÏûÑ ÏàòÏûÖÎãàÎã§. Í∞íÏù¥ ÌÅ¥ÏàòÎ°ù Îπ†Î•¥Í≤å Ïû¨ÏÉùÎêòÍ≥†, ÏûëÏùÑÏàòÎ°ù ÎäêÎ¶¨Í≤å Ïû¨ÏÉùÎê©ÎãàÎã§.",
  },
  en: {
    interval:
      "Time interval for extracting frames from video. Smaller values create smoother GIFs but larger file sizes.",
    outputWidth:
      "Horizontal pixel size of the GIF. Larger values improve quality but increase file size.",
    quality:
      "GIF compression quality. 1 is highest quality (largest file size), 100 is lowest quality (smallest file size).",
    fps: "Frames displayed per second. Higher values play faster, lower values play slower.",
  },
  ja: {
    interval:
      "„Éì„Éá„Ç™„Åã„Çâ„Éï„É¨„Éº„É†„ÇíÊäΩÂá∫„Åô„ÇãÊôÇÈñìÈñìÈöî„Åß„Åô„ÄÇÂÄ§„ÅåÂ∞è„Åï„ÅÑ„Åª„Å©„Çπ„É†„Éº„Ç∫„Å™GIF„ÅåÁîüÊàê„Åï„Çå„Åæ„Åô„Åå„ÄÅ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åè„Å™„Çä„Åæ„Åô„ÄÇ",
    outputWidth:
      "GIF„ÅÆÊ®™„Éî„ÇØ„Çª„É´„Çµ„Ç§„Ç∫„Åß„Åô„ÄÇÂÄ§„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©ÁîªË≥™„ÅåËâØ„Åè„Å™„Çä„Åæ„Åô„Åå„ÄÅ„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫„ÅåÂ§ß„Åç„Åè„Å™„Çä„Åæ„Åô„ÄÇ",
    quality:
      "GIF„ÅÆÂúßÁ∏ÆÂìÅË≥™„Åß„Åô„ÄÇ1„ÅåÊúÄÈ´òÂìÅË≥™ÔºàÊúÄÂ§ß„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Ôºâ„ÄÅ100„ÅåÊúÄ‰ΩéÂìÅË≥™ÔºàÊúÄÂ∞è„Éï„Ç°„Ç§„É´„Çµ„Ç§„Ç∫Ôºâ„Åß„Åô„ÄÇ",
    fps: "1ÁßíÈñì„Å´Ë°®Á§∫„Åï„Çå„Çã„Éï„É¨„Éº„É†Êï∞„Åß„Åô„ÄÇÂÄ§„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©È´òÈÄüÂÜçÁîü„Åï„Çå„ÄÅÂ∞è„Åï„ÅÑ„Åª„Å©‰ΩéÈÄüÂÜçÁîü„Åï„Çå„Åæ„Åô„ÄÇ",
  },
  zh: {
    interval:
      "‰ªéËßÜÈ¢ë‰∏≠ÊèêÂèñÂ∏ßÁöÑÊó∂Èó¥Èó¥Èöî„ÄÇÂÄºË∂äÂ∞èÁîüÊàêÁöÑGIFË∂äÊµÅÁïÖÔºå‰ΩÜÊñá‰ª∂Â§ßÂ∞èË∂äÂ§ß„ÄÇ",
    outputWidth: "GIFÁöÑÊ∞¥Âπ≥ÂÉèÁ¥†Â§ßÂ∞è„ÄÇÂÄºË∂äÂ§ßÁîªË¥®Ë∂äÂ•ΩÔºå‰ΩÜÊñá‰ª∂Â§ßÂ∞èË∂äÂ§ß„ÄÇ",
    quality:
      "GIFÂéãÁº©Ë¥®Èáè„ÄÇ1‰∏∫ÊúÄÈ´òË¥®ÈáèÔºàÊúÄÂ§ßÊñá‰ª∂Â§ßÂ∞èÔºâÔºå100‰∏∫ÊúÄ‰ΩéË¥®ÈáèÔºàÊúÄÂ∞èÊñá‰ª∂Â§ßÂ∞èÔºâ„ÄÇ",
    fps: "ÊØèÁßíÊòæÁ§∫ÁöÑÂ∏ßÊï∞„ÄÇÂÄºË∂äÂ§ßÊí≠ÊîæË∂äÂø´ÔºåË∂äÂ∞èÊí≠ÊîæË∂äÊÖ¢„ÄÇ",
  },
};

function setupTooltips() {
  const settingGroups = document.querySelectorAll(".setting-group");

  settingGroups.forEach((group, index) => {
    const input = group.querySelector("input");
    const inputId = input.id;

    if (tooltips[currentLanguage] && tooltips[currentLanguage][inputId]) {
      // Í∏∞Ï°¥ Ìà¥ÌåÅ Ï†úÍ±∞
      const existingTooltip = group.querySelector(".tooltip");
      if (existingTooltip) {
        existingTooltip.remove();
      }

      const tooltip = document.createElement("div");
      tooltip.className = "tooltip";
      tooltip.textContent = tooltips[currentLanguage][inputId];
      group.appendChild(tooltip);

      group.addEventListener("mouseenter", () => {
        tooltip.classList.add("show");
      });

      group.addEventListener("mouseleave", () => {
        tooltip.classList.remove("show");
      });
    }
  });
}

function updateAllTexts() {
  const t = translations[currentLanguage];

  document.getElementById("langToggleText").textContent = t.langToggleText;
  document.getElementById("title").textContent = t.title;
  document.getElementById("subtitle").textContent = t.subtitle;
  document.getElementById("tagline").textContent = t.tagline;
  document.getElementById("uploadText").textContent = t.uploadText;
  document.getElementById("uploadSubtext").textContent = t.uploadSubtext;
  document.getElementById("previewTitle").textContent = t.previewTitle;
  document.getElementById("outputTitle").textContent = t.outputTitle;
  document.getElementById("downloadText").textContent = t.downloadText;
  document.getElementById("advancedSettingsTitle").textContent =
    t.advancedSettingsTitle;
  document.getElementById("intervalLabel").textContent = t.intervalLabel;
  document.getElementById("outputWidthLabel").textContent = t.outputWidthLabel;
  document.getElementById("qualityLabel").textContent = t.qualityLabel;
  document.getElementById("fpsLabel").textContent = t.fpsLabel;
  document.getElementById("reconvertText").textContent = t.reconvertText;

  // Ìà¥ÌåÅ ÏóÖÎç∞Ïù¥Ìä∏
  setupTooltips();
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ïñ∏Ïñ¥ ÏÑ§Ï†ï Ï†ÅÏö©
updateAllTexts();

// Ï†ÑÏó≠ Î≥ÄÏàòÎì§
let defaultInterval = 0.3;
let defaultwWidth = 420;
let defaultQuality = 80;
let defaultFps = 10;

let frames = [];
let outputWidth = 420;
let outputHeight = 0;
let currentVideoFile = null;

// DOM ÏöîÏÜåÎì§
const videoInput = document.getElementById("videoInput");
const reconvertBtn = document.getElementById("reconvertBtn");
const video = document.getElementById("video");
const canvas = document.getElementById("canvas");
const preview = document.getElementById("preview");
const output = document.getElementById("output");
const downloadLink = document.getElementById("downloadLink");
const intervalInput = document.getElementById("interval");
const qualityInput = document.getElementById("quality");
const fpsInput = document.getElementById("fps");
const outputWidthInput = document.getElementById("outputWidth");
const uploadSection = document.getElementById("uploadSection");
const outputSection = document.getElementById("outputSection");
const previewSection = document.getElementById("previewSection");
const advancedToggle = document.getElementById("advancedToggle");
const advancedContent = document.getElementById("advancedContent");
const toggleIcon = document.getElementById("toggleIcon");

// Í≥†Í∏â ÏÑ§Ï†ï ÌÜ†Í∏Ä
advancedToggle.addEventListener("click", () => {
  advancedContent.classList.toggle("expanded");
  toggleIcon.classList.toggle("rotated");
});

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ìà¥ÌåÅ ÏÑ§Ï†ï
setupTooltips();

// ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Í∏∞Îä•
uploadSection.addEventListener("dragover", (e) => {
  e.preventDefault();
  uploadSection.classList.add("dragover");
});

uploadSection.addEventListener("dragleave", (e) => {
  e.preventDefault();
  uploadSection.classList.remove("dragover");
});

uploadSection.addEventListener("drop", (e) => {
  e.preventDefault();
  uploadSection.classList.remove("dragover");
  const files = e.dataTransfer.files;
  if (files.length > 0 && files[0].type.startsWith("video/")) {
    handleVideoFile(files[0]);
  }
});

uploadSection.addEventListener("click", () => {
  videoInput.click();
});

// Í∏∞Ï°¥ Í∏∞Îä• Ïú†ÏßÄ
videoInput.addEventListener("change", async (e) => {
  const file = e.target.files[0];
  if (!file) return;
  handleVideoFile(file);
});

// async function handleVideoFile(file) {
//   currentVideoFile = file;

//   // Î°úÎî© ÌëúÏãú
//   uploadSection.innerHTML = `
//                 <div class="loading">
//                     <div class="spinner"></div>
//                     <span>ÎπÑÎîîÏò§Î•º Î°úÎî© Ï§ë...</span>
//                 </div>
//             `;

//   video.src = URL.createObjectURL(file);
//   await video.play();
//   video.pause();

//   // Í∏∞Î≥∏ ÏÑ§Ï†ïÍ∞í Ï†ÅÏö©
//   outputWidth = defaultwWidth;
//   const aspectRatio = video.videoHeight / video.videoWidth;
//   outputHeight = Math.round(outputWidth * aspectRatio);

//   // ÌîÑÎ†àÏûÑ Ï∂îÏ∂ú ÌëúÏãú
//   uploadSection.innerHTML = `
//                 <div class="loading">
//                     <div class="spinner"></div>
//                     <span>ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë...</span>
//                 </div>
//             `;

//   // Í∏∞Î≥∏Í∞íÏúºÎ°ú ÌîÑÎ†àÏûÑ Ï∂îÏ∂ú
//   frames = await extractFrames(video, defaultInterval);

//   // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÑπÏÖò ÌëúÏãú
//   previewSection.style.display = "block";

//   // GIF ÏûêÎèô ÏÉùÏÑ± ÏãúÏûë
//   uploadSection.innerHTML = `
//                 <div class="loading">
//                     <div class="spinner"></div>
//                     <span>GIF ÏÉùÏÑ± Ï§ë...</span>
//                 </div>
//             `;

//   // ÏûêÎèôÏúºÎ°ú GIF ÏÉùÏÑ±
//   await generateGIF(frames, defaultwWidth, defaultQuality, defaultFps);

//   // ÏôÑÎ£å ÌëúÏãú
//   uploadSection.innerHTML = `
//                 <div class="upload-icon">‚úÖ</div>
//                 <div class="upload-text">GIF ÏÉùÏÑ± ÏôÑÎ£å!</div>
//                 <div class="upload-subtext">ÏïÑÎûò Í≥†Í∏â ÏÑ§Ï†ïÏóêÏÑú Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú Ïû¨ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§</div>
//             `;

//   // Ï∂úÎ†• ÏÑπÏÖò ÌëúÏãú
//   outputSection.style.display = "block";
// }

async function handleVideoFile(file) {
  currentVideoFile = file;

  // 1) ÎπÑÎîîÏò§ Î°úÎî© UI
  uploadSection.innerHTML = `
    <div class="loading">
      <div class="spinner"></div>
      <span>ÎπÑÎîîÏò§Î•º Î°úÎî© Ï§ë...</span>
    </div>
  `;

  // 2) ÎπÑÎîîÏò§ ÏÜåÏä§ ÏßÄÏ†ï
  video.src = URL.createObjectURL(file);

  // 3) Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Î°úÎìú ÎåÄÍ∏∞ (videoWidth/Height ÏïàÏ†Ñ Ï†ëÍ∑º)
  await new Promise((resolve) => {
    if (video.readyState >= 1) return resolve(); // HAVE_METADATA
    video.addEventListener("loadedmetadata", resolve, { once: true });
  });

  // 4) Í∏∞Î≥∏ Ï∂úÎ†• Ìè≠ = ÏõêÎ≥∏ Í∞ÄÎ°úÌè≠(ÏµúÎåÄ 900px)
  defaultwWidth = Math.min(video.videoWidth, 900);
  outputWidth = defaultwWidth;
  outputWidthInput.value = defaultwWidth;

  // 5) ÎπÑÏú® Ïú†ÏßÄÌïòÏó¨ ÎÜíÏù¥ Í≥ÑÏÇ∞
  const aspectRatio = video.videoHeight / video.videoWidth;
  outputHeight = Math.round(outputWidth * aspectRatio);

  // 6) ÌîÑÎ†àÏûÑ Ï∂îÏ∂ú UI
  uploadSection.innerHTML = `
    <div class="loading">
      <div class="spinner"></div>
      <span>ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë...</span>
    </div>
  `;

  // 7) Í∏∞Î≥∏Í∞íÏúºÎ°ú ÌîÑÎ†àÏûÑ Ï∂îÏ∂ú
  frames = await extractFrames(video, defaultInterval);

  // 8) ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÑπÏÖò ÌëúÏãú
  previewSection.style.display = "block";

  // 9) GIF ÏÉùÏÑ± UI
  uploadSection.innerHTML = `
    <div class="loading">
      <div class="spinner"></div>
      <span>GIF ÏÉùÏÑ± Ï§ë...</span>
    </div>
  `;

  // 10) ÏûêÎèôÏúºÎ°ú GIF ÏÉùÏÑ± (quality/fpsÎäî Í∏∞Ï°¥ Í∏∞Î≥∏Í∞í ÏÇ¨Ïö©)
  await generateGIF(frames, defaultwWidth, defaultQuality, defaultFps);

  // 11) ÏôÑÎ£å UI
  uploadSection.innerHTML = `
    <div class="upload-icon">‚úÖ</div>
    <div class="upload-text">GIF ÏÉùÏÑ± ÏôÑÎ£å!</div>
    <div class="upload-subtext">ÏïÑÎûò Í≥†Í∏â ÏÑ§Ï†ïÏóêÏÑú Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú Ïû¨ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§</div>
  `;

  // 12) Ï∂úÎ†• ÏÑπÏÖò ÌëúÏãú
  outputSection.style.display = "block";
}

// Ïû¨Î≥ÄÌôò Î≤ÑÌäº Ïù¥Î≤§Ìä∏
reconvertBtn.addEventListener("click", async () => {
  if (!currentVideoFile) return;
  output.innerHTML = "";
  downloadLink.style.display = "none";

  uploadSection.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <span>GIF ÏÉùÏÑ± Ï§ë...</span>
                </div>
            `;

  const originalText = reconvertBtn.textContent;
  reconvertBtn.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <span>GIF Ïû¨ÏÉùÏÑ± Ï§ë...</span>
                </div>
            `;
  reconvertBtn.disabled = true;

  // ÏÉàÎ°úÏö¥ ÏÑ§Ï†ïÍ∞í Ï†ÅÏö©
  const newInterval = parseFloat(intervalInput.value) || 1;
  const newWidth = parseInt(outputWidthInput.value, 10) || 420;
  const newQuality = parseInt(qualityInput.value, 10) || 1;
  const newFps = parseInt(fpsInput.value, 10) || 10;

  // ÌÅ¨Í∏∞Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏúºÎ©¥ ÌîÑÎ†àÏûÑ Ïû¨Ï∂îÏ∂ú
  if (newWidth !== defaultwWidth || newInterval !== defaultInterval) {
    defaultwWidth = newWidth;
    defaultInterval = newInterval;
    outputWidth = newWidth;
    const aspectRatio = video.videoHeight / video.videoWidth;
    outputHeight = Math.round(outputWidth * aspectRatio);

    // ÌîÑÎ†àÏûÑ Ï∂îÏ∂ú ÌëúÏãú
    uploadSection.innerHTML = `
                <div class="loading">
                    <div class="spinner"></div>
                    <span>ÌîÑÎ†àÏûÑÏùÑ Ï∂îÏ∂ú Ï§ë...</span>
                </div>
            `;

    frames = await extractFrames(video, newInterval);
  }

  await generateGIF(frames, newWidth, newQuality, newFps);

  reconvertBtn.textContent = originalText;
  reconvertBtn.disabled = false;

  // ÏôÑÎ£å ÌëúÏãú
  uploadSection.innerHTML = `
                <div class="upload-icon">‚úÖ</div>
                <div class="upload-text">GIF ÏÉùÏÑ± ÏôÑÎ£å!</div>
                <div class="upload-subtext">ÏïÑÎûò Í≥†Í∏â ÏÑ§Ï†ïÏóêÏÑú Îã§Î•∏ ÏòµÏÖòÏúºÎ°ú Ïû¨ÏÉùÏÑ±Ìï† Ïàò ÏûàÏäµÎãàÎã§</div>
            `;
});
async function generateGIF(frameList, width, quality, fps) {
  const ctx = canvas.getContext("2d");
  const imageDatas = [];

  canvas.width = width;
  canvas.height = outputHeight;

  for (const blob of frameList) {
    const img = await blobToImage(blob);
    ctx.drawImage(img, 0, 0, width, canvas.height);
    const imageData = ctx.getImageData(0, 0, width, canvas.height);
    imageDatas.push(imageData);
  }

  // gifski-wasmÏùÄ ÏßÅÏ†ë Web WorkerÎ•º Ïì∞ÏßÄ ÏïäÏùå, encodeÎäî Î©îÏù∏ Ïä§Î†àÎìúÏóêÏÑú ÎèôÏûë
  const gifBuffer = await encode({
    frames: imageDatas,
    width,
    height: canvas.height,
    quality, // optional: 1~100
    fps,
  });

  const gifBlob = new Blob([gifBuffer], { type: "image/gif" });
  const gifUrl = URL.createObjectURL(gifBlob);

  const gifImg = document.createElement("img");
  gifImg.src = gifUrl;

  output.innerHTML = "";
  output.appendChild(gifImg);

  downloadLink.href = gifUrl;
  downloadLink.style.display = "inline-block";
}

async function extractFrames(video, interval) {
  let w = canvas.width;
  canvas.width = 0;
  canvas.width = w;
  const ctx = canvas.getContext("2d");
  const duration = video.duration;
  const frameList = [];

  canvas.width = outputWidth;
  canvas.height = outputHeight;

  preview.innerHTML = "";

  for (let t = 0; t < duration; t += interval) {
    video.currentTime = t;
    await waitForSeek(video);

    ctx.drawImage(video, 0, 0, outputWidth, outputHeight);
    const blob = await new Promise((res) => canvas.toBlob(res, "image/png"));

    const img = document.createElement("img");
    img.src = URL.createObjectURL(blob);
    preview.appendChild(img);

    frameList.push(blob);
  }

  return frameList;
}

function waitForSeek(video) {
  return new Promise((resolve) => {
    const handler = () => {
      video.removeEventListener("seeked", handler);
      resolve();
    };
    video.addEventListener("seeked", handler);
  });
}

function blobToImage(blob) {
  return new Promise((resolve) => {
    const img = new Image();
    img.onload = () => resolve(img);
    img.src = URL.createObjectURL(blob);
  });
}

// Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ ÎìúÎûòÍ∑∏ Î∞©ÏßÄ
document.addEventListener("dragover", (e) => e.preventDefault());
document.addEventListener("drop", (e) => e.preventDefault());
